{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "F5 BigIP 3nic Template for use with F5 labs https://clouddocs.f5.com/training/community/",
  "Conditions": {  
	  "UsePaygImage": { "Fn::Equals": [ "Yes", {"Ref": "UsePAYG"} ] },
	  "AssignExtraVips": { "Fn::Equals": [ "Yes", {"Ref": "AssignExtra"} ] }
	 },
  "Parameters": {
	"VPC": {
		"ConstraintDescription": "This must be an existing VPC within the working region.",
		"Type": "AWS::EC2::VPC::Id"
	},
	"BigIpAdminPassword": {
		"Default": "supernetops",
		"Description": "Admin password. NOTE: Must pass the 'pam_cracklib' checks. See support article K10612010",
		"Type": "String"
	},
	"CustomImageId": {
		"ConstraintDescription": "Must be a valid AMI Id",
		"Default": "ami-056a1aba66594cff9",
		"Description": "Please specify your Region BigIP AMI Id that you have Agreed to T&Cs. BYOL or PAYG [eg, PAYG: SYD v13.1=ami-056a1aba66594cff9]",
		"MaxLength": 255,
		"MinLength": 1,
		"Type": "String"
	},
	"InstanceType": {
		"AllowedValues": [
			"t2.large",
			"m4.xlarge",
			"m4.2xlarge",
			"m4.4xlarge",
			"m5.large",
			"m5.xlarge",
			"m5.2xlarge",
			"c4.xlarge",
			"c4.2xlarge",
			"c5.xlarge",
			"c5.2xlarge"
		],
		"ConstraintDescription": "Subset of valid EC2 instance types for Lab BIG-IP",
		"Default": "m4.4xlarge",
		"Description": "Size of the F5 BIG-IP VE Instance that supports 3 NICs |'m4.4xlarge' has 8 cores, 32Gb RAM @~50cents/hour",
		"Type": "String"
	},
	"UsePAYG": {
	   "AllowedValues": [
		"Yes",
		"No"
	   ],
	   "Default": "Yes",
	   "Description": "You can use an F5 Eval key, or choose Pay-As-You-Go. If you select 'No' you need to specify a License Key. ** NOTE** PAYG F5 Software cost is approx @~50cents/hour",
	   "Type": "String"
	  },
	"licenseKey1": {
		"ConstraintDescription": "Verify your F5 BYOL regkey.",
	    "Default": "Optional",
		"Description": "F5 BYOL license key - For eval obtain from your F5 SE or leave 'Optional' if using PAYG option",
		"MaxLength": 255,
		"MinLength": 8,
		"Type": "String"
	},
	"ManagementSubnet": {
		"ConstraintDescription": "The subnet ID must be within an existing VPC",
		"Description": "Management Subnet ID",
		"Type": "AWS::EC2::Subnet::Id"
	},
	"ntpServer": {
		"Default": "0.pool.ntp.org",
		"Description": "NTP server for this implementation",
		"Type": "String"
	},
	"restrictedSrcAddress": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
		"ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
		"Default": "0.0.0.0/0",
		"Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
		"MaxLength": 18,
		"MinLength": 9,
		"Type": "String"
	},
	"restrictedSrcAddressApp": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
		"ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
		"Default": "0.0.0.0/0",
		"Description": " The IP address range that can be used to access web traffic to the EC2 instances",
		"MaxLength": 18,
		"MinLength": 9,
		"Type": "String"
	},
	"sshKey": {
		"Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
		"Type": "AWS::EC2::KeyPair::KeyName"
	},
	"ExternalSubnet": {
		"ConstraintDescription": "The subnet ID must be within an existing VPC",
		"Description": "Public or External subnet",
		"Type": "AWS::EC2::Subnet::Id"
	},
	"InternalSubnet": {
		"ConstraintDescription": "The subnet ID must be within an existing VPC",
		"Description": "Private or Internal subnet",
		"Type": "AWS::EC2::Subnet::Id"
	},
	"BigIpManagementIP": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x",
		"Default": "10.1.1.10",
		"Description": "Management IP - Lab Default is 10.1.1.10",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},
	"BigIpExternalSubnetIP": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x",
		"Default": "10.1.20.10",
		"Description": "Public or External Self-IP - Lab Default is 10.1.20.10",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},
	"BigIpInternalSubnetIP": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x",
		"Default": "10.1.10.10",
		"Description": "Private or Internal Self-IP - Lab Default is 10.1.10.10",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},
	"AssignExtra": {
	   "AllowedValues": [
		"Yes",
		"No"
	   ],
	   "Default": "Yes",
	   "Description": "Assign/reserve extra EC2 addresses for VIPs ?",
	   "Type": "String"
	  },	
	"AdditionalVipAddr120": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.120",
		"Description": "EC2 address to be used as first VIP address: 10.1.20.120",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},		
	"AdditionalVipAddr121": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.121",
		"Description": "Additional EC2 address to be used as VIP address: 10.1.20.121",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},
	"AdditionalVipAddr122": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.122",
		"Description": "Additional EC2 address to be used as VIP address: 10.1.20.122",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},
	"AdditionalVipAddr123": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.123",
		"Description": "Additional EC2 address to be used as VIP address: 10.1.20.123",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},
	"AdditionalVipAddr124": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.124",
		"Description": "Additional EC2 address to be used as VIP address: 10.1.20.124",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},		
	"AdditionalVipAddr125": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.125",
		"Description": "Additional EC2 address to be used as VIP address: 10.1.20.125",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},	
	"AdditionalVipAddr126": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.126",
		"Description": "Additional EC2 address to be used as VIP address: 10.1.20.126",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},
	"AdditionalVipAddr127": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.127",
		"Description": "Additional EC2 address to be used as VIP address: 10.1.20.127",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},
	"AdditionalVipAddr128": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.128",
		"Description": "Additional EC2 address to be used as VIP address eg: 10.1.20.128",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},
	"AdditionalVipAddr129": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.129",
		"Description": "Additional EC2 address to be used as VIP address eg: 10.1.20.129",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},	
	"AdditionalVipAddr130": {
		"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
		"ConstraintDescription": "Must be a valid IP in the form x.x.x.x",
		"Default": "10.1.20.130",
		"Description": "Additional EC2 address to be used as VIP address: 10.1.20.130",
		"MaxLength": 15,
		"MinLength": 7,
		"Type": "String"
	},
	"TimeZone": {
            "Default": "Australia/NSW",
            "Description": "Olson TimeZone string from /usr/share/zoneinfo eg: America/Los_Angeles",
            "Type": "String"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "For First Accept BIG-IP Terms and Conditions and note Image ID [v13 or v14]. Either BYOL or PAYG."
                    },
                    "Parameters": []
                },
                {
                    "Label": {
                        "default": "https://aws.amazon.com/marketplace/search/results?searchTerms=f5+Big-ip"
                    },
                    "Parameters": []
                },
                {
                    "Label": {
                        "default": "--------------------------------------------------------------------------------------------------------------------------------------------------------"
                    },
                    "Parameters": []
                },
                {
                    "Label": {
                        "default": "Template has custom TMSH commands executed via 'cloud-init' process at runtime"
                    },
                    "Parameters": []
                },
                {
                    "Label": {
                        "default": "Check \"Outputs\" for setup details after completion"
                    },
                    "Parameters": []
                },
                {
                    "Label": {
                        "default": "--------------------------------------------------------------------------------------------------------------------------------------------------------"
                    },
                    "Parameters": []
                },
                {
                    "Label": {
                        "default": "This template assumes you have 3 Subnets in CIDR 10.1.0.0/16. The Lab TOPOLOGY template creates that for you."
                    },
                    "Parameters": []
                },
                {
                    "Label": {
                        "default": "--------------------------------------------------------------------------------------------------------------------------------------------------------"
                    },
                    "Parameters": []
                },
                {
                    "Label": {
                        "default": "NETWORKING CONFIGURATION"
                    },
                    "Parameters": [
                        "VPC",
                        "ManagementSubnet",
                        "ExternalSubnet",
                        "InternalSubnet",
                        "availabilityZone1"
                    ]
                },
				{
				 "Label": {
				  "default": "PAYG or BYOL"
				 },
				 "Parameters": [
				  "UsePAYG"
				 ]
				},				
                {
                    "Label": {
                        "default": "INSTANCE CONFIGURATION"
                    },
                    "Parameters": [
                        "CustomImageId",
                        "InstanceType",
                        "applicationInstanceType",
                        "licenseKey1",
                        "licenseKey2",
                        "managementGuiPort",
                        "sshKey",
                        "BigIpAdminPassword",
                        "restrictedSrcAddress",
                        "restrictedSrcAddressApp",
                        "ntpServer",
                        "TimeZone"
                    ]
                },
                {
                    "Label": {
                        "default": "BIG-IP ADDRESSING"
                    },
                    "Parameters": [
                        "BigIpManagementIP",
                        "BigIpExternalSubnetIP",
                        "BigIpInternalSubnetIP",
						"AdditionalVipAddr120"
                    ]
                },
				{
				 "Label": {
				  "default": "Assign Extra Addresses in EC2 for VIPs"
				 },
				 "Parameters": [
				  "AssignExtra"
				 ]
				},
				{
                    "Label": {
                        "default": "If Assign 'YES' - Avaliable Addresses for Virtual servers"
                    },
                    "Parameters": [
						"AdditionalVipAddr121",
						"AdditionalVipAddr122",
						"AdditionalVipAddr123",
						"AdditionalVipAddr124",
						"AdditionalVipAddr125",
						"AdditionalVipAddr126",
						"AdditionalVipAddr127",
						"AdditionalVipAddr128",
						"AdditionalVipAddr129",
						"AdditionalVipAddr130"
                    ]
                }
            ],
            "ParameterLabels": {
                "VPC": {
                    "default": "VPC"
                },
                "additionalNicLocation": {
                    "default": "Additional NIC Location"
                },
                "applicationInstanceType": {
                    "default": "Application Instance Type"
                },
                "availabilityZone1": {
                    "default": "Availability Zone 1"
                },
				"UsePAYG": {
				     "default": "Use PAYG license?"
				},				
                "CustomImageId": {
                    "default": "AMI Image Id for your Region"
                },
                "InstanceType": {
                    "default": "AWS Instance Size"
                },
                "licenseKey1": {
                    "default": "Big-IP License Key"
                },
                "licenseKey2": {
                    "default": "License Key 2"
                },
                "managementGuiPort": {
                    "default": "BIG-IP Management Port"
                },
                "ManagementSubnet": {
                    "default": "Management Subnet"
                },
                "ntpServer": {
                    "default": "NTP Server"
                },
                "restrictedSrcAddress": {
                    "default": "Source Address(es) for Management Access"
                },
                "restrictedSrcAddressApp": {
                    "default": "Source Address(es) for Web Application Access"
                },
                "sshKey": {
                    "default": "SSH Key"
                },
                "ExternalSubnet": {
                    "default": "External Subnet"
                },
                "InternalSubnet": {
                    "default": "Internal Subnet"
                },
                "TimeZone": {
                    "default": "Timezone (Olson)"
                },
                "BigIpAdminPassword": {
                    "default": "Admin password for Web UI access"
                },
                "BigIpManagementIP": {
                    "default": "BigIp Management IP"
                },
                "BigIpExternalSubnetIP": {
                    "default": "BigIp External Self-IP"
                },
                "BigIpInternalSubnetIP": {
                    "default": "BigIp Internal Self-IP"
                },
                "AdditionalVipAddr120": {
                    "default": "Address for VIP .120"
                },
                "AdditionalVipAddr121": {
                    "default": "Additional VIP .121"
                },				
                "AdditionalVipAddr122": {
                    "default": "Additional VIP .122"
                },
                "AdditionalVipAddr123": {
                    "default": "Additional VIP .123"
                },	
                "AdditionalVipAddr124": {
                    "default": "DVSM Lab VIP .124"
                },
                "AdditionalVipAddr125": {
                    "default": "ASM Lab VIP Addr .125"
                },
                "AdditionalVipAddr126": {
                    "default": "ASM Lab VIP Addr .126"
                },
                "AdditionalVipAddr127": {
                    "default": "ASM Lab VIP Addr .127"
                },
                "AdditionalVipAddr128": {
                    "default": "ASM Lab VIP Addr .128"
                },	
                "AdditionalVipAddr129": {
                    "default": "ASM Lab VIP Addr .129"
                },	
                "AdditionalVipAddr130": {
                    "default": "ASM Lab VIP Addr .130"
                }			
            }
        },
        "Version": "3.3.0",
        "AWS::CloudFormation::Designer": {
            "f9d4eb8a-463d-409a-916f-c307209a492c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -50,
                    "y": 310
                },
                "z": 1,
                "embeds": []
            },
            "5eb1af8b-6578-4f2f-8fdf-5484a8dba7e1": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -150,
                    "y": 310
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "f9d4eb8a-463d-409a-916f-c307209a492c"
                ]
            },
            "e956aac1-839c-4ed1-a681-10f9644be2b5": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -550,
                    "y": 310
                },
                "z": 1,
                "embeds": []
            },
            "a67e46f4-41e4-4122-80b3-bbf2024cc316": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -150,
                    "y": 450
                },
                "z": 1,
                "embeds": []
            },
            "5b0c4b5f-3186-4e58-90d2-69a8daddc74e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -160,
                    "y": 180
                },
                "z": 1,
                "embeds": []
            },
            "b3ef9593-6cef-4afd-85c6-d2f68144a251": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -340,
                    "y": 50
                },
                "z": 1,
                "embeds": []
            },
            "3cbfa9c8-a6da-40fb-ba48-5a2c1aab08ae": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -270,
                    "y": 180
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "5b0c4b5f-3186-4e58-90d2-69a8daddc74e"
                ]
            },
            "a0be736d-0240-476c-9eba-f9ea99d9d4da": {
                "source": {
                    "id": "b3ef9593-6cef-4afd-85c6-d2f68144a251"
                },
                "target": {
                    "id": "3cbfa9c8-a6da-40fb-ba48-5a2c1aab08ae"
                }
            },
            "2cfc8d08-bc64-42d1-80fe-0623af783a2c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -200,
                    "y": 50
                },
                "z": 1,
                "embeds": []
            },
            "d7468fd4-001a-4f2b-b0df-cac0767611bc": {
                "source": {
                    "id": "2cfc8d08-bc64-42d1-80fe-0623af783a2c"
                },
                "target": {
                    "id": "3cbfa9c8-a6da-40fb-ba48-5a2c1aab08ae"
                }
            },
            "851ab336-8f09-4d5a-b8bf-bec0139c3977": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -430,
                    "y": 310
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "e956aac1-839c-4ed1-a681-10f9644be2b5"
                ]
            },
            "92bf51aa-a0d8-4f4d-8276-9824f1f5efd3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -430,
                    "y": 50
                },
                "z": 1,
                "embeds": []
            },
            "fca1b086-33f2-4c46-9971-07db313b647b": {
                "source": {
                    "id": "92bf51aa-a0d8-4f4d-8276-9824f1f5efd3"
                },
                "target": {
                    "id": "851ab336-8f09-4d5a-b8bf-bec0139c3977"
                }
            },
            "f6bebf4d-2109-45e5-8e38-0b82e7e68c14": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -270,
                    "y": 450
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "a67e46f4-41e4-4122-80b3-bbf2024cc316"
                ]
            },
            "7fca3b03-1899-4d05-b7d5-3e0eae2f7c4f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -270,
                    "y": 310
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "851ab336-8f09-4d5a-b8bf-bec0139c3977",
                    "3cbfa9c8-a6da-40fb-ba48-5a2c1aab08ae",
                    "f6bebf4d-2109-45e5-8e38-0b82e7e68c14"
                ]
            }
        }
    },
  "Resources": {
	"BigIp1Instance": {
		"Metadata": {
			"AWS::CloudFormation::Init": {
				"config": {
					"commands": {
						"000-disable-1nicautoconfig": {
							"command": "/usr/bin/setdb provision.1nicautoconfig disable"
						},
						"010-install-libs": {
							"command": {
								"Fn::Join": [
									" ",
									[
										"mkdir -p /var/log/cloud/aws;",
										"nohup /config/installCloudLibs.sh",
										"&>> /var/log/cloud/aws/install.log < /dev/null &"
									]
								]
							}
						},
						"020-generate-password": {
							"command": {
								"Fn::Join": [
									"",
									[
										"nohup /config/waitThenRun.sh",
										" f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
										" --signal PASSWORD_CREATED",
										" --file f5-rest-node",
										" --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
										" --log-level silly",
										" -o /var/log/cloud/aws/generatePassword.log",
										" &>> /var/log/cloud/aws/install.log < /dev/null",
										" &"
									]
								]
							}
						},
						"030-create-admin-user": {
							"command": {
								"Fn::Join": [
									"",
									[
										"nohup /config/waitThenRun.sh",
										" f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
										" --wait-for PASSWORD_CREATED",
										" --signal ADMIN_CREATED",
										" --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
										" --cl-args '--user admin",
										" --password-file /config/cloud/aws/.adminPassword",
										" --password-encrypted",
										"'",
										" --log-level silly",
										" -o /var/log/cloud/aws/createUser.log",
										" &>> /var/log/cloud/aws/install.log < /dev/null",
										" &"
									]
								]
							}
						},
						"040-network-config": {
							"command": {
								"Fn::Join": [
									"",
									[
										"GATEWAY_MAC=`ifconfig eth1 | egrep HWaddr | awk '{print tolower($5)}'`; ",
										"GATEWAY_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
										"GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
										"GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
										"GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
										"GATEWAY_MAC2=`ifconfig eth2 | egrep HWaddr | awk '{print tolower($5)}'`; ",
										"GATEWAY_CIDR_BLOCK2=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC2}/subnet-ipv4-cidr-block`; ",
										"GATEWAY_PREFIX2=${GATEWAY_CIDR_BLOCK2#*/}; ",
										"nohup /config/waitThenRun.sh ",
										"f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
										"--host localhost ",
										"--user admin ",
										"--password-url file:///config/cloud/aws/.adminPassword ",
										"--password-encrypted ",
										"-o /var/log/cloud/aws/network.log ",
										"--log-level silly ",
										"--wait-for ADMIN_CREATED ",
										"--signal NETWORK_CONFIG_DONE ",
										"--vlan name:external,nic:1.1 ",
										"--default-gw ${GATEWAY} ",
										"--self-ip name:external-self,address:",
										{
											"Fn::GetAtt": [
												"BigIp1ExternalSubnetInterface",
												"PrimaryPrivateIpAddress"
											]
										},
										"/${GATEWAY_PREFIX},vlan:external ",
										"--vlan name:internal,nic:1.2 ",
										"--self-ip name:internal-self,address:",
										{
											"Fn::GetAtt": [
												"BigIp1InternalInterface",
												"PrimaryPrivateIpAddress"
											]
										},											
										"/${GATEWAY_PREFIX2},vlan:internal ",
										"&>> /var/log/cloud/aws/install.log < /dev/null &"
									]
								]
							}
						},
					  "050-onboard-BIG-IP": {
					  
						"command": {
						 "Fn::If": [
						  "UsePaygImage",
						  {
						   "Fn::Join": [
								" ",
								[
									"REGION=\"",
									{
										"Ref": "AWS::Region"
									},
									"\";",
									"DEPLOYMENTID=`echo \"",
									{
										"Ref": "AWS::StackId"
									},
									"\"|sha512sum|cut -d \" \" -f 1`;",
									"CUSTOMERID=`echo \"",
									{
										"Ref": "AWS::AccountId"
									},
									"\"|sha512sum|cut -d \" \" -f 1`;",
									"NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
									"nohup /config/waitThenRun.sh",
									"f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
									"--wait-for NETWORK_CONFIG_DONE",
									"-o /var/log/cloud/aws/onboard.log",
									"--log-level silly",
									"--no-reboot",
									"--host localhost",
									"--user admin",
									"--password-url file:///config/cloud/aws/.adminPassword",
									"--password-encrypted",
									"--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
									"--ntp ",
									{
										"Ref": "ntpServer"
									},
									"--tz ",
									{
										"Ref": "TimeZone"
									},
									"--dns ${NAME_SERVER}",
									"--module ltm:nominal",
									"--module asm:nominal",
									"--module avr:nominal",
									"--ping",
									"&>> /var/log/cloud/aws/install.log < /dev/null &"
								]
						   ]
						  },
						  {
						   "Fn::Join": [
								" ",
								[
									"REGION=\"",
									{
										"Ref": "AWS::Region"
									},
									"\";",
									"DEPLOYMENTID=`echo \"",
									{
										"Ref": "AWS::StackId"
									},
									"\"|sha512sum|cut -d \" \" -f 1`;",
									"CUSTOMERID=`echo \"",
									{
										"Ref": "AWS::AccountId"
									},
									"\"|sha512sum|cut -d \" \" -f 1`;",
									"NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
									"nohup /config/waitThenRun.sh",
									"f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
									"--wait-for NETWORK_CONFIG_DONE",
									"-o /var/log/cloud/aws/onboard.log",
									"--log-level silly",
									"--no-reboot",
									"--host localhost",
									"--user admin",
									"--password-url file:///config/cloud/aws/.adminPassword",
									"--password-encrypted",
									"--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
									"--ntp ",
									{
										"Ref": "ntpServer"
									},
									"--tz ",
									{
										"Ref": "TimeZone"
									},
									"--dns ${NAME_SERVER}",
									"--module ltm:nominal",
									"--module asm:nominal",
									"--module avr:nominal",
									"--license ",
									{
										"Ref": "licenseKey1"
									},
									"--ping",
									"&>> /var/log/cloud/aws/install.log < /dev/null &"
								]
						   ]
						  }
						 ]
						}
					   },							
						"060-custom-config": {
							"command": {
								"Fn::Join": [
									" ",
									[
										"nohup /config/waitThenRun.sh",
										"f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
										"--file /config/cloud/aws/custom-config.sh",
										"--cwd /config/cloud/aws",
										"-o /var/log/cloud/aws/custom-config.log",
										"--log-level silly",
										"--signal CUSTOM_CONFIG_DONE",
										"--wait-for ONBOARD_DONE",
										"&>> /var/log/cloud/aws/install.log < /dev/null &"
									]
								]
							}
						},
						"065-cluster": {
							"command": {
								"Fn::Join": [
									" ",
									[]
								]
							}
						},
						"070-rm-password": {
							"command": {
								"Fn::Join": [
									" ",
									[
										"nohup /config/waitThenRun.sh",
										"f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
										"--file /config/cloud/aws/rm-password.sh",
										"-o /var/log/cloud/aws/rm-password.log",
										"--log-level silly",
										"--wait-for CUSTOM_CONFIG_DONE",
										"--signal PASSWORD_REMOVED",
										"&>> /var/log/cloud/aws/install.log < /dev/null &"
									]
								]
							}
						}
					},
					"files": {
						"/config/cloud/aws/custom-config.sh": {
							"content": {
								"Fn::Join": [
									"",
									[
										"#!/bin/bash\n",
										"tz=",
										{
											"Ref": "TimeZone"
										},
										"\n",
										"BIGIP_ADMIN_USERNAME=admin\n",
										"BIGIP_ADMIN_PASSWORD=",
										{
											"Ref": "BigIpAdminPassword"
										},
										"\n",
										"BIGIP_INTERNAL_VLAN=internal\n",
										"# Set shutdown daily at midnight\n",
										"cat << 'EOF' >> /etc/crontab\n",
										"55 23 * * * root shutdown -h 5\n",
										"\n",
										"EOF\n",
										"sleep 1\n",
										"PROGNAME=$(basename $0)\n",
										"function error_exit {\n",
										"echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
										"exit 1\n",
										"}\n",
										"declare -a tmsh=()\n",
										"echo 'starting custom-config.sh'\n",
										"tmsh+=(\n",
										"\"tmsh load sys application template /config/cloud/aws/f5.service_discovery.tmpl\"\n",
										"\"tmsh load sys application template /config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\"\n",
										"\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
										"\"tmsh modify sys ntp TimeZone ${tz}\"\n",
										"\"tmsh modify sys ntp servers add { 0.pool.ntp.org }\"\n",
										"\"tmsh modify sys dns name-servers add { ${NAME_SERVER} }\"\n",
										"\"tmsh modify sys global-settings gui-setup disabled\"\n",
										"\"tmsh modify sys global-settings hostname ${HOSTNAME}\"\n",
										"\"tmsh modify auth user admin password ${BIGIP_ADMIN_PASSWORD}\"\n",
										"\"tmsh save sys config\")\n",
										"for CMD in \"${tmsh[@]}\"\n",
										"do\n",
										"  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
										"    if $CMD;then\n",
										"        echo \"command $CMD successfully executed.\"\n",
										"    else\n",
										"        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
										"    fi\n",
										"done\n",
										"date\n",
										"### END CUSTOM CONFIGURATION"
									]
								]
							},
							"group": "root",
							"mode": "000755",
							"owner": "root"
						},
						"/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl": {
							"group": "root",
							"mode": "000755",
							"owner": "root",
							"source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/v2.2.0/f5-cloud-logger/f5.cloud_logger.v1.0.0.tmpl"
						},
						"/config/cloud/aws/f5.service_discovery.tmpl": {
							"group": "root",
							"mode": "000755",
							"owner": "root",
							"source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/v2.2.0/f5-service-discovery/f5.service_discovery.tmpl"
						},
						"/config/cloud/aws/getNameServer.sh": {
							"content": {
								"Fn::Join": [
									"\n",
									[
										"INTERFACE=$1",
										"INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
										"VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
										"VPC_NET=${VPC_CIDR_BLOCK%/*}",
										"NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
										"echo $NAME_SERVER"
									]
								]
							},
							"group": "root",
							"mode": "000755",
							"owner": "root"
						},
						"/config/cloud/aws/rm-password.sh": {
							"content": {
								"Fn::Join": [
									"",
									[
										"#!/bin/bash\n",
										"PROGNAME=$(basename $0)\n",
										"function error_exit {\n",
										"echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
										"exit 1\n",
										"}\n",
										"date\n",
										"echo 'starting rm-password.sh'\n",
										"declare -a tmsh=()\n",
										"tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
										"for CMD in \"${tmsh[@]}\"\n",
										"do\n",
										"  if $CMD;then\n",
										"      echo \"command $CMD successfully executed.\"\n",
										"  else\n",
										"      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
										"  fi\n",
										"done\n",
										"date\n"
									]
								]
							},
							"group": "root",
							"mode": "000755",
							"owner": "root"
						},
						"/config/cloud/f5-cloud-libs-aws.tar.gz": {
							"group": "root",
							"mode": "000755",
							"owner": "root",
							"source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-aws/v2.2.1/dist/f5-cloud-libs-aws.tar.gz"
						},
						"/config/cloud/f5-cloud-libs.tar.gz": {
							"group": "root",
							"mode": "000755",
							"owner": "root",
							"source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v4.3.1/dist/f5-cloud-libs.tar.gz"
						},
						"/config/installCloudLibs.sh": {
							"content": {
								"Fn::Join": [
									"\n",
									[
										"#!/bin/bash",
										"echo about to execute",
										"checks=0",
										"while [ $checks -lt 120 ]; do echo checking mcpd",
										"    tmsh -a show sys mcp-state field-fmt | grep -q running",
										"    if [ $? == 0 ]; then",
										"        echo mcpd ready",
										"        break",
										"    fi",
										"    echo mcpd not ready yet",
										"    let checks=checks+1",
										"    sleep 10",
										"done",
										"echo loading verifyHash script",
										"if ! tmsh load sys config merge file /config/verifyHash; then",
										"    echo cannot validate signature of /config/verifyHash",
										"    exit",
										"fi",
										"echo loaded verifyHash",
										"declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/aws/f5.service_discovery.tmpl\" \"/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\")",
										"for fileToVerify in \"${filesToVerify[@]}\"",
										"do",
										"    echo verifying \"$fileToVerify\"",
										"    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
										"        echo \"$fileToVerify\" is not valid",
										"        exit 1",
										"    fi",
										"    echo verified \"$fileToVerify\"",
										"done",
										"mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
										"echo expanding f5-cloud-libs.tar.gz",
										"tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
										"echo installing dependencies",
										"tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
										"echo cloud libs install complete",
										"touch /config/cloud/cloudLibsReady"
									]
								]
							},
							"group": "root",
							"mode": "000755",
							"owner": "root"
						},
						"/config/verifyHash": {
							"content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) ce4f117ee84dc5e05be0bb29d2536f6e8dbb8ce3d899c1c380bdab56c9584983ddc64213ef7b1dfd305ca6ad9c830d73d4c3343256822fb500c5b77f48cf1c4e\n            set hashes(f5-cloud-libs-aws.tar.gz) 01ad00f2210375e3b770151a55a28198187e74cf57aedb83da7579de821933828e7fe129a05adcb27b0d036bc185393adda5619a4c1a30a7b5d9c79d21b1f6d2\n            set hashes(f5-cloud-libs-azure.tar.gz) d5e2e26f92f61f3917d8212b71fee55e9f58811ee488137e9c28ac54e5eb2434725696af286839e8b5ea68e05078188e0ada6e215c6c233d2585fd2acca0532d\n            set hashes(f5-cloud-libs-gce.tar.gz) 67e9fef439851ad4f9fbaf3f3574dadb2fceea0b13a77ccde41bcf31c42f87d6c37c64d50d685fc9a90acedc8c80abee9114b9a232809f36746bdc8e1de1b22a\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 592f94c6bfcf543f97632b8ac42b773e30390db77f150291815c45d7f62c30b5ade515ae7257f3bedc0329084499fdf18a6d9a93c90cade23542116edefd6849\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) a26d5c470e70b821621476bcfd0579dbc0964f6a54158bc6314fa1e2f63b23bf3f3eb43ade5081131c24e08579db2e1e574beb3f8d9789d28acb4f312fad8c3e\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature L3b5hKxLwPj6VsVBGly/pd2sMA1N+gCZfLVv0MZ071f5HM5krchDDhHrJupT4rN30OkMo0rThjV5iRGhCsx2kNqKnUtIJYGX8LrONUV9Iwb+XzfUhhTh3djK4R/NHn6RV+J8x+nrppk5D0vuVsBNim7D2/M8IdAT4QIbEW+uTZQ8EDubm6+4fC71cQoS98ebs69PhBb8u4cFWerIkBgT/ChWKahQ8GQpXgcFtI2DsjxWY9fMePf4c//EMGIeDA0ur1QZovPgWwotleAS238LPfO6brESgDm4NawKDnlKMZ9fDgUStK4jEdy/9sK870B0y8SprXonx8fhoBQE0zlsGw==\n    signing-key /Common/f5-irule\n}",
							"group": "root",
							"mode": "000755",
							"owner": "root"
						},
						"/config/waitThenRun.sh": {
							"content": {
								"Fn::Join": [
									"\n",
									[
										"#!/bin/bash",
										"while true; do echo \"waiting for cloud libs install to complete\"",
										"    if [ -f /config/cloud/cloudLibsReady ]; then",
										"        break",
										"    else",
										"        sleep 10",
										"    fi",
										"done",
										"\"$@\""
									]
								]
							},
							"group": "root",
							"mode": "000755",
							"owner": "root"
						}
					}
				}
			},
			"AWS::CloudFormation::Designer": {
				"id": "7fca3b03-1899-4d05-b7d5-3e0eae2f7c4f"
			}
		},
		"Properties": {
			"BlockDeviceMappings": [
				{
					"DeviceName": "/dev/xvda",
					"Ebs": {
						"DeleteOnTermination": "true",
						"VolumeType": "gp2"
					}
				},
				{
					"DeviceName": "/dev/xvdb",
					"NoDevice": {}
				}
			],
			"IamInstanceProfile": {
				"Ref": "BigIpServiceDiscoveryProfile"
			},
			"ImageId": {
				"Ref": "CustomImageId"
			},
			"InstanceType": {
				"Ref": "InstanceType"
			},
			"KeyName": {
				"Ref": "sshKey"
			},
			"NetworkInterfaces": [
				{
					"Description": "Management Interface",
					"DeviceIndex": "0",
					"NetworkInterfaceId": {
						"Ref": "BigIp1ManagementInterface"
					}
				},
				{
					"Description": "Public or External Interface",
					"DeviceIndex": "1",
					"NetworkInterfaceId": {
						"Ref": "BigIp1ExternalSubnetInterface"
					}
				},
				{
					"Description": "Private or Internal Interface",
					"DeviceIndex": "2",
					"NetworkInterfaceId": {
						"Ref": "BigIp1InternalInterface"
					}
				}
			],
			"Tags": [
				{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"",
							[
							"F5Lab:",
								{
									"Ref": "AWS::StackName"
								}
							]
						]
					}
				},
				{
					"Key": "SSHConnectivity",
					"Value": {
						"Fn::Join": [
							"",
							[
								"ssh -i your-aws-key.pem admin@",
								{
									"Ref": "BigIp1ManagementEipAddress"
								}
							]
						]
					}
				},
				{
					"Key": "MngmtPublicConnectivity",
					"Value": {
						"Fn::Join": [
							"",
							[
								"https://",
								{
									"Ref": "BigIp1ManagementEipAddress"
								}
							]
						]
					}
				}
			],
			"UserData": {
				"Fn::Base64": {
					"Fn::Join": [
						"",
						[
							"#!/bin/bash\n",
							"/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
							{
								"Ref": "AWS::StackId"
							},
							" -r ",
							"BigIp1Instance",
							" --region ",
							{
								"Ref": "AWS::Region"
							},
							"\n"
						]
					]
				}
			}
		},
		"Type": "AWS::EC2::Instance"
	},
	"BigIp1InternalInterface": {
		"Properties": {
			"Description": "Internal Interface for the BIG-IP",
			"GroupSet": [
				{
					"Ref": "AllowAllSecurityGroup"
				}
			],
			"SubnetId": {
				"Ref": "InternalSubnet"
			},
			"SourceDestCheck" : "false",
			"PrivateIpAddresses": [
				{ "PrivateIpAddress": { "Ref": "BigIpInternalSubnetIP" }, "Primary": "true" }					
			],
			"Tags": [
				{
					"Key": "Network",
					"Value": "F5Labs:BigIp:InternalNIC"
				},			
				{
					"Key": "Name",
					"Value": "F5Labs:BigIp:InternalNIC"
				}
			]
		},
		"Type": "AWS::EC2::NetworkInterface",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "f6bebf4d-2109-45e5-8e38-0b82e7e68c14"
			}
		}
	},
	"BigIp1ManagementEipAddress": {
		"Properties": {
			"Domain": "VPC"
		},
		"Type": "AWS::EC2::EIP",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "92bf51aa-a0d8-4f4d-8276-9824f1f5efd3"
			}
		}
	},
	"BigIp1ManagementEipAssociation": {
		"Properties": {
			"AllocationId": {
				"Fn::GetAtt": [
					"BigIp1ManagementEipAddress",
					"AllocationId"
				]
			},
			"NetworkInterfaceId": {
				"Ref": "BigIp1ManagementInterface"
			}	
		},
		"Type": "AWS::EC2::EIPAssociation",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "fca1b086-33f2-4c46-9971-07db313b647b"
			}
		}
	},
	"BigIp1ManagementInterface": {
		"Properties": {
			"Description": "Management Interface for the BIG-IP",
			"GroupSet": [
				{
					"Ref": "BigIpManagementSecurityGroup"
				}
			],
			"SubnetId": {
				"Ref": "ManagementSubnet"
			},
			"PrivateIpAddresses": [
				{
					"PrivateIpAddress": {
						"Ref": "BigIpManagementIP"
					},
					"Primary": "true"
				}
			],
			"Tags": [
				{
					"Key": "Network",
					"Value": "F5Labs:BigIp:ManagementNIC"
				},			
				{
					"Key": "Name",
					"Value": "F5Labs:BigIp:ManagementNIC"
				}
			]
		},
		"Type": "AWS::EC2::NetworkInterface",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "851ab336-8f09-4d5a-b8bf-bec0139c3977"
			}
		}
	},
	"BigIp1ExternalSubnetInterface": {
		"Properties": {
			"Fn::If": [
			  "AssignExtraVips",
			  {
				"Description": "External Interface for the BIG-IP",
				"GroupSet": [
					{
						"Ref": "AllowAllSecurityGroup"
					}
				],
				"SubnetId": {
					"Ref": "ExternalSubnet"
				},
				"SourceDestCheck" : "false",
				"PrivateIpAddresses" : [ 
					   { "PrivateIpAddress": { "Ref": "BigIpExternalSubnetIP" }, "Primary": "true" }, 
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr120" }, "Primary": "false" },
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr121" }, "Primary": "false" },
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr122" }, "Primary": "false" },
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr123" }, "Primary": "false" },
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr124" }, "Primary": "false" },
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr125" }, "Primary": "false" },
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr126" }, "Primary": "false" },
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr127" }, "Primary": "false" },
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr128" }, "Primary": "false" },
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr129" }, "Primary": "false" },
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr130" }, "Primary": "false" }
					 ],		   
				"Tags": [
						{
							"Key": "Network",
							"Value": "F5Labs:BigIp:ExternalNIC"
						},			
						{
							"Key": "Name",
							"Value": "F5Labs:BigIp:ExternalNIC"
						}
				]
				
			  },
			  {
				"Description": "External Interface for the BIG-IP",
				"GroupSet": [
					{
						"Ref": "AllowAllSecurityGroup"
					}
				],
				"SubnetId": {
					"Ref": "ExternalSubnet"
				},
				"SourceDestCheck" : "false",
				"PrivateIpAddresses" : [ 
					   { "PrivateIpAddress": { "Ref": "BigIpExternalSubnetIP" }, "Primary": "true" }, 
					   { "PrivateIpAddress": { "Ref": "AdditionalVipAddr120" }, "Primary": "false" }
					 ],		   
				"Tags": [
						{
							"Key": "Network",
							"Value": "F5Labs:BigIp:ExternalNIC"
						},			
						{
							"Key": "Name",
							"Value": "F5Labs:BigIp:ExternalNIC"
						}
				]
			  }
			 ]
			},
		"Type": "AWS::EC2::NetworkInterface",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "3cbfa9c8-a6da-40fb-ba48-5a2c1aab08ae"
			}
		}
	},
	"BigIp1VipEipAddress": {
		"Properties": {
			"Domain": "VPC"
		},
		"Type": "AWS::EC2::EIP",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "2cfc8d08-bc64-42d1-80fe-0623af783a2c"
			}
		}
	},
	"BigIp1VipEipAssociation": {
		"Properties": {
			"AllocationId": {
				"Fn::GetAtt": [
					"BigIp1VipEipAddress",
					"AllocationId"
				]
			},
			"NetworkInterfaceId": {
				"Ref": "BigIp1ExternalSubnetInterface"
			},
			"PrivateIpAddress": {
				"Ref": "AdditionalVipAddr120"
			}					
		},
		"Type": "AWS::EC2::EIPAssociation",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "d7468fd4-001a-4f2b-b0df-cac0767611bc"
			}
		}
	},
	"RestrictedPortsSecurityGroup": {
		"Properties": {
			"GroupDescription": "Public or external interface rules",
			"SecurityGroupIngress": [
				{
					"CidrIp": {
						"Ref": "restrictedSrcAddressApp"
					},
					"FromPort": "22",
					"IpProtocol": "tcp",
					"ToPort": "22"
				},
				{
					"CidrIp": {
						"Ref": "restrictedSrcAddressApp"
					},
					"FromPort": "443",
					"IpProtocol": "tcp",
					"ToPort": "443"
				}
			],
			"Tags": [
				{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"",
							[
								{
									"Ref": "AWS::StackName"
								},
								":Restricted Security Group"
							]
						]
					}
				}
			],
			"VpcId": {
				"Ref": "VPC"
			}
		},
		"Type": "AWS::EC2::SecurityGroup",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "5b0c4b5f-3186-4e58-90d2-69a8daddc74e"
			}
		}
	},
	"AllowAllSecurityGroup": {
		"Properties": {
			"GroupDescription": "Enable All protocols",
			"SecurityGroupIngress": [
				{
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "1",
					"ToPort": "65535",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "udp",
					"FromPort": "1",
					"ToPort": "65535",
					"CidrIp": "0.0.0.0/0"
				}
			],			
			"Tags": [
				{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"",
							[
								{
									"Ref": "AWS::StackName"
								},
								":AllowAll_Security_Group"
							]
						]
					}
				}
			],
			"VpcId": {
				"Ref": "VPC"
			}
		},
		"Type": "AWS::EC2::SecurityGroup",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "a67e46f4-41e4-4122-80b3-bbf2024cc316"
			}
		}
	},
	"BigIpManagementSecurityGroup": {
		"Properties": {
			"GroupDescription": "BIG-IP management interface policy",
			"SecurityGroupIngress": [
			    {
                   "CidrIp": "10.1.0.0/16",
                   "IpProtocol": "tcp",
                   "FromPort": "1",
                   "ToPort": "65535"
                },
				{
				    "CidrIp": "10.1.0.0/16",
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1"
				},				
				{
					"CidrIp": {
						"Ref": "restrictedSrcAddress"
					},
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22"
				},
				{
					"CidrIp": {
						"Ref": "restrictedSrcAddress"
					},
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443"
				}
			],
			"Tags": [
				{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"",
							[
								{
									"Ref": "AWS::StackName"
								},
								":Mngmt Security Group"
							]
						]
					}
				}
			],
			"VpcId": {
				"Ref": "VPC"
			}
		},
		"Type": "AWS::EC2::SecurityGroup",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "e956aac1-839c-4ed1-a681-10f9644be2b5"
			}
		}
	},
	"BigIpServiceDiscoveryAccessRole": {
		"Properties": {
			"AssumeRolePolicyDocument": {
				"Statement": [
					{
						"Action": [
							"sts:AssumeRole"
						],
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						}
					}
				],
				"Version": "2012-10-17"
			},
			"Path": "/",
			"Policies": [
				{
					"PolicyDocument": {
						"Statement": [
							{
								"Action": [
									"ec2:DescribeInstances",
									"ec2:DescribeInstanceStatus",
									"ec2:DescribeAddresses",
									"ec2:AssociateAddress",
									"ec2:DisassociateAddress",
									"ec2:DescribeNetworkInterfaces",
									"ec2:DescribeNetworkInterfaceAttributes",
									"ec2:DescribeRouteTables",
									"ec2:ReplaceRoute",
									"ec2:assignprivateipaddresses",
									"sts:AssumeRole"
								],
								"Effect": "Allow",
								"Resource": [
									"*"
								]
							}
						],
						"Version": "2012-10-17"
					},
					"PolicyName": "BigIpServiceDiscoveryPolicy"
				}
			]
		},
		"Type": "AWS::IAM::Role",
		"Metadata": {
			"AWS::CloudFormation::Designer": {
				"id": "f9d4eb8a-463d-409a-916f-c307209a492c"
			}
		}
	},
	"BigIpServiceDiscoveryProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "BigIpServiceDiscoveryAccessRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5eb1af8b-6578-4f2f-8fdf-5484a8dba7e1"
                }
            }
        }
    },
  "Outputs": {
	"BigIp1ExternalInterfacePrivateIp": {
		"Description": "Internally routable IP of the public interface on BIG-IP",
		"Value": {
			"Fn::GetAtt": [
				"BigIp1ExternalSubnetInterface",
				"PrimaryPrivateIpAddress"
			]
		}
	},
	"BigIp1InstanceId": {
		"Description": "Instance Id of BIG-IP in Amazon",
		"Value": {
			"Ref": "BigIp1Instance"
		}
	},
	"BigIp1InternalInterface": {
		"Description": "Internal interface ID on BIG-IP",
		"Value": {
			"Ref": "BigIp1InternalInterface"
		}
	},
	"BigIp1InternalInterfacePrivateIp": {
		"Description": "Internally routable IP of internal interface on BIG-IP",
		"Value": {
			"Fn::GetAtt": [
				"BigIp1InternalInterface",
				"PrimaryPrivateIpAddress"
			]
		}
	},
	"BigIp1ManagementInterface": {
		"Description": "Management interface ID on BIG-IP",
		"Value": {
			"Ref": "BigIp1ManagementInterface"
		}
	},
	"BigIp1ManagementInterfacePrivateIp": {
		"Description": "Internally routable IP of the management interface on BIG-IP",
		"Value": {
			"Fn::GetAtt": [
				"BigIp1ManagementInterface",
				"PrimaryPrivateIpAddress"
			]
		}
	},
	"BigIpAdminPassword": {
		"Description": "To change run 'modify auth password admin' at CLI",
		"Value": {
			"Ref": "BigIpAdminPassword"
		}
	},
	"BigIp1MngmtUrl": {
		"Description": "BIG-IP Management GUI",
		"Value": {
			"Fn::Join": [
				"",
				[
					"https://",
					{
						"Fn::GetAtt": [
							"BigIp1Instance",
							"PublicIp"
						]
					}
				]
			]
		}
	},
	"BigIp1VipEipAddress": {
		"Description": "Future EIP address for VIP",
		"Value": {
			"Fn::Join": [
				"",
				[
					"https://",
					{
						"Ref": "BigIp1VipEipAddress"
					}
				]
			]
		}
	},
	"BigIp1ExternalSubnetInterface": {
		"Description": "External interface Id on BIG-IP",
		"Value": {
			"Ref": "BigIp1ExternalSubnetInterface"
		}
	},
	"availabilityZone1": {
		"Description": "Availability Zone",
		"Value": {
			"Fn::GetAtt": [
				"BigIp1Instance",
				"AvailabilityZone"
			]
		}
	},
	"AllowAllSecurityGroup": {
		"Description": "Private or Internal Security Group",
		"Value": {
			"Ref": "AllowAllSecurityGroup"
		}
	},
	"BigIpManagementSecurityGroup": {
            "Description": "Management Security Group",
            "Value": {
                "Ref": "BigIpManagementSecurityGroup"
            }
        }
    }
}